# ESPHome ESP8266 configuration file
esphome:
  name: esp-arduino-tft-weather
  friendly_name: ESP-Arduino-TFT-Weather

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "<RELPLACE_ME>"  #! Replace with your actual encryption key

ota:
  - platform: esphome
    password: "<RELPLACE_ME>"  #! Replace with your actual OTA password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-Arduino-Tft-Weather"
    password: "<RELPLACE_ME>"  #! Replace with your actual fallback password

captive_portal:

# Read the pre-formatted payload from Home Assistant as text
text_sensor:
  - platform: homeassistant
    entity_id: sensor.uart_weather_payload
    id: uart_weather_payload

output:
  - platform: gpio
    pin: GPIO2
    id: led_builtin
  - platform: gpio
    pin: GPIO12  # D6
    id: tft_power_pin

switch:
  - platform: output
    name: "Weather Display Power"
    id: weather_display_power
    output: tft_power_pin
    restore_mode: ALWAYS_ON # Always on after boot
    on_turn_on: # On turn on send UART payload
      then:
        - delay: 4s # Allow time for Arduino to boot
        - uart.write:
            id: uart_bus
            data: !lambda |-
              std::string s = id(uart_weather_payload).state + "\n";
              ESP_LOGD("UART", "Sending payload due to TFT ON: '%s'", s.c_str());
              return std::vector<uint8_t>(s.begin(), s.end());

# UART setup: only TX needed
uart:
  id: uart_bus
  tx_pin: D1  # GPIO5 on NodeMCU V3
  baud_rate: 9600
  debug:
    direction: TX  # Log outgoing UART data for debugging

# # Every minute, log and send the payload string plus newline
interval:
  - interval: 60s
    then:
      - output.turn_off: led_builtin # Active low, turn on when UART send.
      - uart.write:
          id: uart_bus
          data: !lambda |-
            // Append newline for Arduino
            std::string s = id(uart_weather_payload).state + "\n";
            ESP_LOGD("UART", "Sending payload: '%s'", s.c_str());
            return std::vector<uint8_t>(s.begin(), s.end());

  - interval: 1s
    then:
      - output.turn_on: led_builtin # Active low, turn off every 1s